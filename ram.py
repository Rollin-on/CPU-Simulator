class RAM:
   
        def __init__(self):
            self.address = {0 :"00000000001000100001100000100000", 4 :'00000000100000100010100000100010', 8 : '00000000010001010011000000101010', 12 :'00100000111010000000000000000111', 16 :'10001101001010100000000000001111', 30 :'00000000000000000000000001100100', 20 :'10101101011011000000000000000101', 24 :'00010101101011100000000000000000', 28 :'00001000000000000000000000001000', 32 :'00001100000000000000000000001011', 36: '00000001111100001000100000100000', 40:'', 44: '00000010010100111010000000100010', 48: '00000011111100000000000000001000'} #address and instructions as a key pair in the memory
        # print(f"RAM initialized with address: {self.address}")
        def retrieve(self, add):
            if add in self.address:
                return self.address[add]
            else:
                return None
        def update(self, key, value):
            self.address[key] = value 
            print(self.address) 
            return self.address
        #add    
        #subtraction binary 00000000100000100010100000100010
        #slt binary 00000000010001010011000000101010
        #addi 00100000111010000000000000000111
        #lw  10001101001010100000000000001111
        #sw 10101101011011000000000000000101 - SW operation rs register 11 value (80) rt register 12 (100) imm(offset is 5)- outcome store 100 in memory address 85 in ram
        #BNE 00010101101011100000000000000000
        #J 00001000000000000000000000001000
        #JAL 00001100000000000000000000001001